version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: agritech-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - agritech-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: agritech-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092" # Port for external access from your Spring app
      - "29092:29092" # Port for internal communication between containers
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Listener for other Docker containers: INTERNAL://agritech-kafka:29092
      # Listener for your host machine (Spring app): OUTSIDE://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://agritech-kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    networks:
      agritech-network:
        aliases:
          - kafka # Alias so 'kafka' and 'agritech-kafka' both work

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: agritech-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: agritech-kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - agritech-network

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    container_name: agritech-ksqldb
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: agritech-kafka:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: agritech-ksql
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - agritech-network

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.29.0
    container_name: agritech-ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - agritech-network

  postgres:
    image: postgres:13
    container_name: agritech-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: jlr_user
      POSTGRES_PASSWORD: 'mysecretpassword'
      POSTGRES_DB: jlr_users
    volumes:
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "max_replication_slots=10"
    networks:
      - agritech-network

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.0
    container_name: agritech-kafka-connect
    depends_on:
      - kafka
      - schema-registry
      - postgres
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: agritech-kafka:29092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: agritech-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: agritech-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: agritech-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: agritech-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      DB_PASSWORD: 'mysecretpassword'
    command:
      - bash
      - -c
      - |
        echo "Installing Debezium PostgreSQL connector..."
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.4.0
        echo "Starting Kafka Connect..."
        /etc/confluent/docker/run

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: agritech-kafka-ui
    depends_on:
      - kafka
      - schema-registry
      - kafka-connect
    ports:
      - "8084:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: agritech-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: agritech-kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: agritech-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb-server:8088
    networks:
      - agritech-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    container_name: agritech-control-center
    depends_on:
      - kafka
      - schema-registry
      - kafka-connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: agritech-kafka:29092
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: http://kafka-connect:8083
      CONTROL_CENTER_KSQL_KSQLDB1_URL: http://ksqldb-server:8088
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: http://localhost:8088
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - agritech-network

networks:
  agritech-network:
    driver: bridge
